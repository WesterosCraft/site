---
import escapeHTML from "escape-html";

const isText = (value: any): boolean =>
  typeof value === "object" && value !== null && typeof value.text === "string";

type Node = {
  type: string;
  value?: {
    url: string;
    alt: string;
  };
  children?: Node[];
  url?: string;
  [key: string]: unknown;
  newTab?: boolean;
};

export type CustomRenderers = {
  // @ts-ignore
  [key: string]: (args: {
    node: Node;
    Serialize: SerializeFunction;
    index: number;
  }) => JSX.Element; // eslint-disable-line
};

type SerializeFunction = {
  content?: Node[];
  customRenderers?: CustomRenderers;
};

interface Props extends SerializeFunction {}

const { content, customRenderers } = Astro.props;
---

{
  content?.map((node) => {
    if (isText(node)) {
      let text = <span set:html={node.text} />;

      if (node.bold) {
        text = <strong>{text}</strong>;
      }

      if (node.code) {
        text = <code>{text}</code>;
      }

      if (node.italic) {
        text = <em>{text}</em>;
      }

      if (node.underline) {
        text = <span class='underline'>{text}</span>;
        // text = <Highlight key={i} {...node} />
      }

      if (node.strikethrough) {
        text = <span class='line-through'>{text}</span>;
      }

      return <Fragment set:html={text} />;
    }

    if (!node) {
      return null;
    }

    switch (node.type) {
      case "br":
        return <br />;
      case "h1":
        return (
          <h1>
            <Astro.self client:idle content={node.children} />
          </h1>
        );
      case "h2":
        return (
          <h2>
            <Astro.self client:idle client:idle content={node.children} />
          </h2>
        );
      case "h3":
        return (
          <h3>
            <Astro.self client:idle content={node.children} />
          </h3>
        );
      case "h4":
        return (
          <h4>
            <Astro.self client:idle content={node.children} />
          </h4>
        );
      case "h5":
        return (
          <h5>
            <Astro.self client:idle content={node.children} />
          </h5>
        );
      case "h6":
        return (
          <h6>
            <Astro.self client:idle content={node.children} />
          </h6>
        );
      case "quote":
        return (
          <blockquote>
            <Astro.self client:idle content={node.children} />
          </blockquote>
        );
      case "ul":
        return (
          <ul>
            <Astro.self client:idle content={node.children} />
          </ul>
        );
      case "ol":
        return (
          <ol>
            <Astro.self client:idle content={node.children} />
          </ol>
        );
      case "li":
        return (
          <li>
            <Astro.self client:idle content={node.children} />
          </li>
        );
      // case 'link':
      //   return (
      //     <CMSLink
      //       key={i}
      //       type={node.linkType === 'internal' ? 'reference' : 'custom'}
      //       url={node.url}
      //       reference={node.doc as Reference}
      //       newTab={node?.newTab}
      //     >
      //       <Astro.self client:idle content={node.children} customRenderers={customRenderers} />
      //     </CMSLink>
      //   )

      // case 'upload': {
      //   return <RichTextUpload key={i} node={node} />
      // }

      // case 'label':
      //   return (
      //     <Label key={i}>
      //       <Astro.self client:idle content={node.children} customRenderers={customRenderers} />
      //     </Label>
      //   )

      // case 'large-body': {
      //   return (
      //     <LargeBody key={i}>
      //       <Astro.self client:idle content={node.children} customRenderers={customRenderers} />
      //     </LargeBody>
      //   )
      // }
      case "video": {
        const { source, id: videoID } = node;

        //   if (source === "youtube") {
        //     return <Video key={i} platform={source} id={videoID as string} />;
        //   }

        return null;
      }

      default:
        return (
          <p>
            {console.log("here")}
            <Astro.self content={node.children} />
          </p>
        );
    }
  })
}
